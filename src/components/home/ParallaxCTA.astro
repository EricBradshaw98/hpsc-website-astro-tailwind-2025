---
export interface ParallaxCTAProps {
	backgroundImage: string;
	heading: string;
	description: string;
	ctas: Array<{
		text: string;
		href: string;
		style: 'primary' | 'secondary';
	}>;
}

interface Props extends ParallaxCTAProps {}

const { backgroundImage, heading, description, ctas } = Astro.props;
---

<section class="mb-16 -mx-4 md:mx-0 relative min-h-80 md:h-80 md:rounded-2xl overflow-hidden">
	<!-- Parallax Background -->
	<div
		id="parallax-bg"
		class="absolute inset-0 bg-cover bg-center transform scale-110"
		style={`background-image: url('${backgroundImage}');`}
	>
	</div>

	<!-- Gradient Overlay -->
	<div
		class="absolute inset-0"
		style="background: linear-gradient(135deg, rgba(0, 182, 240, 0.9) 0%, rgba(0, 146, 192, 0.85) 100%);"
	>
	</div>

	<!-- Content -->
	<div class="relative z-10 h-full flex items-center px-4 md:px-16 py-8 md:py-0">
		<div class="w-full">
			<h2 class="text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-6">
				{heading}
			</h2>
			<p class="text-lg md:text-xl text-white/95 mb-8">
				{description}
			</p>
			<div class="flex flex-wrap gap-4">
				{
					ctas.map((cta) => (
						<a
							href={cta.href}
							class={
								cta.style === 'primary'
									? 'px-8 py-3 rounded-lg font-semibold transition-colors bg-primary text-white hover:bg-primary-dark border-2 border-white'
									: 'border-2 border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white/10 transition-colors'
							}
						>
							{cta.text}
						</a>
					))
				}
			</div>
		</div>
	</div>
</section>

<script>
	// Parallax scroll effect
	window.addEventListener('scroll', () => {
		const parallaxBg = document.getElementById('parallax-bg');
		if (parallaxBg) {
			const scrolled = window.pageYOffset;
			const parallaxSpeed = 0.5;
			parallaxBg.style.transform = `translateY(${scrolled * parallaxSpeed}px) scale(1.1)`;
		}
	});
</script>
