---
export interface ParallaxCTAProps {
	backgroundImage: string;
	heading: string;
	description: string;
	ctas: Array<{
		text: string;
		href: string;
		style: 'primary' | 'secondary';
	}>;
}

interface Props extends ParallaxCTAProps {}

const { backgroundImage, heading, description, ctas } = Astro.props;
---

<section
	class="mb-16 relative min-h-80 md:h-80 md:rounded-2xl overflow-hidden max-w-7xl mx-auto px-4"
>
	<!-- Parallax Background -->
	<div
		id="parallax-bg"
		class="absolute inset-0 bg-cover bg-center transform scale-110"
		style={`background-image: url('${backgroundImage}');`}
	>
	</div>

	<!-- Gradient Overlay -->
	<div class="absolute inset-0 bg-gradient-to-br from-primary-900/95 to-primary-600/90"></div>

	<!-- Content -->
	<div class="relative z-10 h-full flex items-center px-4 md:px-16 py-8 md:py-0">
		<div class="w-full">
			<h2 class="text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-6">
				{heading}
			</h2>
			<p class="text-lg md:text-xl text-white/95 mb-8">
				{description}
			</p>
			<nav aria-label="Call-to-action">
				<ul class="flex flex-wrap gap-4 list-none">
					{
						ctas.map((cta) => (
							<li>
								<a
									href={cta.href}
									class={
										cta.style === 'primary'
											? 'inline-block px-8 py-3 rounded-lg font-semibold transition-colors bg-white text-primary-900 hover:bg-primary-50 shadow-lg'
											: 'inline-block border-2 border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-primary-900 transition-colors'
									}
								>
									{cta.text}
								</a>
							</li>
						))
					}
				</ul>
			</nav>
		</div>
	</div>
</section>

<script>
	// Parallax scroll effect
	window.addEventListener('scroll', () => {
		const parallaxBg = document.getElementById('parallax-bg');
		if (parallaxBg) {
			const scrolled = window.pageYOffset;
			const parallaxSpeed = 0.5;
			parallaxBg.style.transform = `translateY(${scrolled * parallaxSpeed}px) scale(1.1)`;
		}
	});
</script>
