---
/**
 * StepByStepTutorial Component
 * Interactive educational walkthrough with click/tap navigation
 *
 * Props:
 * - steps: Array of { title: string, content: string, tip?: string, image?: string }
 * - id: Unique ID for this tutorial instance (required)
 * - title?: Optional title for the tutorial
 */

interface TutorialStep {
	title: string;
	content: string;
	tip?: string;
	image?: string;
}

interface Props {
	steps: TutorialStep[];
	id: string;
	title?: string;
}

const { steps, id, title } = Astro.props;
---

<div class="step-by-step-tutorial" data-tutorial-id={id}>
	{
		title && (
			<div class="mb-6">
				<h3 class="text-2xl font-bold text-gray-900 flex items-center gap-2">
					<svg class="w-7 h-7 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
						/>
					</svg>
					{title}
				</h3>
			</div>
		)
	}

	<div class="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-200">
		<!-- Progress Bar -->
		<div class="bg-gray-100 px-6 py-3 border-b border-gray-200">
			<div class="flex items-center justify-between mb-2">
				<span class="text-sm font-semibold text-gray-700">
					Step <span class="tutorial-current-step">1</span> of {steps.length}
				</span>
				<span class="text-xs text-gray-500 tutorial-progress-text">0% Complete</span>
			</div>
			<div class="w-full bg-gray-300 rounded-full h-2 overflow-hidden">
				<div
					class="tutorial-progress-bar h-full bg-gradient-to-r from-primary to-primary-dark transition-all duration-500"
					style="width: 0%"
				>
				</div>
			</div>
		</div>

		<!-- Step Indicator Dots -->
		<div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
			<div class="flex items-center justify-center gap-2">
				{
					steps.map((_, index) => (
						<button
							class={`tutorial-dot w-2.5 h-2.5 rounded-full transition-all duration-300 ${index === 0 ? 'bg-primary w-8' : 'bg-gray-300'}`}
							data-step-index={index}
							aria-label={`Go to step ${index + 1}`}
						/>
					))
				}
			</div>
		</div>

		<!-- Content Area -->
		<div class="tutorial-content-area p-8 min-h-[400px]">
			{
				steps.map((step, index) => (
					<div class={`tutorial-step ${index === 0 ? 'active' : ''}`} data-step-number={index}>
						{/* Step Image (if provided) */}
						{step.image && (
							<div class="mb-6 rounded-xl overflow-hidden">
								<img src={step.image} alt={step.title} class="w-full h-64 object-cover" />
							</div>
						)}

						{/* Step Title */}
						<div class="mb-4 flex items-center gap-3">
							<div class="flex-shrink-0 w-10 h-10 bg-primary text-white rounded-full flex items-center justify-center font-bold">
								{index + 1}
							</div>
							<h4 class="text-2xl font-bold text-gray-900">{step.title}</h4>
						</div>

						{/* Step Content */}
						<div class="prose prose-lg max-w-none text-gray-700 mb-6" set:html={step.content} />

						{/* Tip Box (if provided) */}
						{step.tip && (
							<div class="bg-primary/5 border-l-4 border-primary p-4 rounded-r-lg">
								<div class="flex items-start gap-3">
									<svg
										class="w-6 h-6 text-primary flex-shrink-0 mt-0.5"
										fill="currentColor"
										viewBox="0 0 20 20"
									>
										<path
											fill-rule="evenodd"
											d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
											clip-rule="evenodd"
										/>
									</svg>
									<div>
										<p class="font-semibold text-gray-900 mb-1">Pro Tip</p>
										<p class="text-sm text-gray-700">{step.tip}</p>
									</div>
								</div>
							</div>
						)}
					</div>
				))
			}
		</div>

		<!-- Navigation Controls -->
		<div class="px-8 py-6 bg-gray-50 border-t border-gray-200">
			<div class="flex items-center justify-between gap-4">
				<button
					class="tutorial-prev-btn px-6 py-3 bg-white border-2 border-gray-300 text-gray-700 rounded-lg font-semibold hover:bg-gray-50 hover:border-gray-400 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
					disabled
				>
					<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M15 19l-7-7 7-7"></path>
					</svg>
					Previous
				</button>

				<button
					class="tutorial-next-btn px-6 py-3 bg-primary text-white rounded-lg font-semibold hover:bg-primary-dark transition-all flex items-center gap-2"
				>
					<span class="tutorial-next-text">Next</span>
					<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"
						></path>
					</svg>
				</button>
			</div>
		</div>

		<!-- Completion Message -->
		<div
			class="tutorial-complete-message hidden px-8 py-8 bg-gradient-to-r from-green-50 to-primary/5 border-t-4 border-green-500"
		>
			<div class="flex items-center gap-4 mb-4">
				<div
					class="flex-shrink-0 w-16 h-16 bg-green-500 text-white rounded-full flex items-center justify-center"
				>
					<svg class="w-10 h-10" fill="currentColor" viewBox="0 0 20 20">
						<path
							fill-rule="evenodd"
							d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
							clip-rule="evenodd"></path>
					</svg>
				</div>
				<div>
					<h4 class="text-2xl font-bold text-gray-900 mb-1">Tutorial Complete!</h4>
					<p class="text-gray-600">You've completed all {steps.length} steps. Great job!</p>
				</div>
			</div>
			<button
				class="tutorial-restart-btn px-6 py-3 bg-primary text-white rounded-lg font-semibold hover:bg-primary-dark transition-all"
			>
				Restart Tutorial
			</button>
		</div>
	</div>
</div>

<style>
	.tutorial-step {
		display: none;
		animation: fadeIn 0.4s ease-in;
	}

	.tutorial-step.active {
		display: block;
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.tutorial-dot {
		cursor: pointer;
	}

	.tutorial-dot:hover {
		transform: scale(1.2);
	}
</style>

<script>
	/* eslint-disable no-undef */
	class StepByStepTutorial {
		private container: HTMLElement;
		private steps: NodeListOf<HTMLElement>;
		private dots: NodeListOf<HTMLElement>;
		private currentStepDisplay: HTMLElement;
		private progressBar: HTMLElement;
		private progressText: HTMLElement;
		private prevBtn: HTMLButtonElement;
		private nextBtn: HTMLButtonElement;
		private nextText: HTMLElement;
		private completeMessage: HTMLElement;
		private restartBtn: HTMLElement;
		private contentArea: HTMLElement;
		private currentStep = 0;
		private totalSteps: number;

		constructor(container: HTMLElement) {
			this.container = container;
			this.steps = container.querySelectorAll('.tutorial-step');
			this.dots = container.querySelectorAll('.tutorial-dot');
			this.currentStepDisplay = container.querySelector('.tutorial-current-step')!;
			this.progressBar = container.querySelector('.tutorial-progress-bar')!;
			this.progressText = container.querySelector('.tutorial-progress-text')!;
			this.prevBtn = container.querySelector('.tutorial-prev-btn')!;
			this.nextBtn = container.querySelector('.tutorial-next-btn')!;
			this.nextText = container.querySelector('.tutorial-next-text')!;
			this.completeMessage = container.querySelector('.tutorial-complete-message')!;
			this.restartBtn = container.querySelector('.tutorial-restart-btn')!;
			this.contentArea = container.querySelector('.tutorial-content-area')!;
			this.totalSteps = this.steps.length;

			this.init();
		}

		private init() {
			// Navigation buttons
			this.nextBtn.addEventListener('click', () => this.nextStep());
			this.prevBtn.addEventListener('click', () => this.prevStep());
			this.restartBtn.addEventListener('click', () => this.restart());

			// Dot navigation
			this.dots.forEach((dot, index) => {
				dot.addEventListener('click', () => this.goToStep(index));
			});

			// Keyboard navigation
			this.container.addEventListener('keydown', (e) => {
				if (e.key === 'ArrowRight') this.nextStep();
				if (e.key === 'ArrowLeft') this.prevStep();
			});

			this.updateUI();
		}

		private nextStep() {
			if (this.currentStep < this.totalSteps - 1) {
				this.currentStep++;
				this.updateUI();
			} else {
				this.showCompletion();
			}
		}

		private prevStep() {
			if (this.currentStep > 0) {
				this.currentStep--;
				this.updateUI();
			}
		}

		private goToStep(index: number) {
			if (index >= 0 && index < this.totalSteps) {
				this.currentStep = index;
				this.updateUI();
			}
		}

		private updateUI() {
			// Update steps visibility
			this.steps.forEach((step, index) => {
				if (index === this.currentStep) {
					step.classList.add('active');
				} else {
					step.classList.remove('active');
				}
			});

			// Update dots
			this.dots.forEach((dot, index) => {
				if (index === this.currentStep) {
					dot.classList.add('bg-primary', 'w-8');
					dot.classList.remove('bg-gray-300', 'w-2.5');
				} else if (index < this.currentStep) {
					dot.classList.add('bg-primary-dark', 'w-2.5');
					dot.classList.remove('bg-gray-300', 'bg-primary', 'w-8');
				} else {
					dot.classList.add('bg-gray-300', 'w-2.5');
					dot.classList.remove('bg-primary', 'bg-primary-dark', 'w-8');
				}
			});

			// Update progress bar
			const progress = ((this.currentStep + 1) / this.totalSteps) * 100;
			this.progressBar.style.width = `${progress}%`;
			this.progressText.textContent = `${Math.round(progress)}% Complete`;

			// Update step counter
			this.currentStepDisplay.textContent = `${this.currentStep + 1}`;

			// Update buttons
			this.prevBtn.disabled = this.currentStep === 0;

			if (this.currentStep === this.totalSteps - 1) {
				this.nextText.textContent = 'Complete';
			} else {
				this.nextText.textContent = 'Next';
			}

			// Scroll to top of tutorial
			this.contentArea.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
		}

		private showCompletion() {
			this.contentArea.style.display = 'none';
			this.completeMessage.classList.remove('hidden');
			this.progressBar.style.width = '100%';
			this.progressText.textContent = '100% Complete';
		}

		private restart() {
			this.currentStep = 0;
			this.contentArea.style.display = 'block';
			this.completeMessage.classList.add('hidden');
			this.updateUI();
		}
	}

	// Initialize all tutorials on the page
	function initTutorials() {
		const tutorials = document.querySelectorAll('.step-by-step-tutorial');
		tutorials.forEach((tutorial) => {
			new StepByStepTutorial(tutorial as HTMLElement);
		});
	}

	// Initialize on DOM ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initTutorials);
	} else {
		initTutorials();
	}
</script>
