---
import Layout from '../../layouts/Layout.astro';
import PageHeader from '../../components/shared/PageHeader.astro';
import TeamSection from '../../components/about/TeamSection.astro';
import { type TeamMember } from '../../components/about/TeamMemberCard.astro';

// API Configuration
const TEAM_API_URL = import.meta.env.PUBLIC_TEAM_API_URL;
const TEAM_API_KEY = import.meta.env.TEAM_API_KEY;

// Helper function to generate placeholder avatar from random image API
function getPlaceholderAvatar(name: string, index: number): string {
	const photoId = (index % 70) + 1;
	return `https://i.pravatar.cc/400?img=${photoId}`;
}

// Helper function to fetch from WordPress REST API
async function fetchWordPressTeam(
	url: string
): Promise<{ staff: TeamMember[]; board: TeamMember[]; advisors: TeamMember[] }> {
	try {
		const response = await fetch(`${url}/wp-json/wp/v2/team_members?per_page=100`, {
			headers: TEAM_API_KEY ? { Authorization: `Bearer ${TEAM_API_KEY}` } : {},
		});

		if (!response.ok) throw new Error(`API error: ${response.status}`);

		const data = await response.json();
		const staff: TeamMember[] = [];
		const board: TeamMember[] = [];
		const advisors: TeamMember[] = [];

		data.forEach((member: any) => {
			const teamMember: TeamMember = {
				name: member.title.rendered,
				title: member.acf?.position || member.meta?.position || 'Team Member',
				bio: member.acf?.bio || member.content?.rendered?.replace(/<[^>]*>/g, ''),
				image:
					member.acf?.photo ||
					member.featured_media_url ||
					getPlaceholderAvatar(member.title.rendered, 0),
				linkedin: member.acf?.linkedin || '#',
			};

			const category = member.acf?.category || member.meta?.category || 'staff';
			if (category === 'board') board.push(teamMember);
			else if (category === 'advisor') advisors.push(teamMember);
			else staff.push(teamMember);
		});

		return { staff, board, advisors };
	} catch (error) {
		console.error('Failed to fetch from WordPress API:', error);
		throw error;
	}
}

// Helper function to fetch from custom JSON API
async function fetchCustomAPI(
	url: string
): Promise<{ staff: TeamMember[]; board: TeamMember[]; advisors: TeamMember[] }> {
	try {
		const response = await fetch(url, {
			headers: TEAM_API_KEY ? { Authorization: `Bearer ${TEAM_API_KEY}` } : {},
		});

		if (!response.ok) throw new Error(`API error: ${response.status}`);

		const data = await response.json();

		const processMembers = (members: TeamMember[], startIndex: number) =>
			members.map((member, index) => ({
				...member,
				image: member.image || getPlaceholderAvatar(member.name, startIndex + index),
			}));

		return {
			staff: processMembers(data.staff || [], 0),
			board: processMembers(data.board || [], 100),
			advisors: processMembers(data.advisors || [], 200),
		};
	} catch (error) {
		console.error('Failed to fetch from custom API:', error);
		throw error;
	}
}

// Fallback static data (used if API fails or no API configured)
const fallbackData = {
	staff: [
		{
			name: 'Tanya Ratzlaff',
			title: 'Executive Director',
			bio: 'Guides strategic planning, provides industry and program oversight, and leads government relations',
			image: getPlaceholderAvatar('Tanya Ratzlaff', 0),
			linkedin: '#',
		},
		{
			name: 'Braidey Sturgeon',
			title: 'Manager of Industry Engagement',
			bio: "Leads industry engagement and outreach, and spearheads the organization's justice, equity, diversity, inclusion, and Indigenous reconciliation work",
			image: getPlaceholderAvatar('Braidey Sturgeon', 1),
			linkedin: '#',
		},
		{
			name: 'Pubali ShomeBasu',
			title: 'Program Manager',
			bio: 'Leads operations for the Home Performance Contractor Network and provides strategic support',
			image: getPlaceholderAvatar('Pubali ShomeBasu', 2),
			linkedin: '#',
		},
		{
			name: 'Tatianna Cullen',
			title: 'Coordinator',
			bio: 'Provides administrative, operational, and project support',
			image: getPlaceholderAvatar('Tatianna Cullen', 3),
			linkedin: '#',
		},
		{
			name: 'Helena Arnold',
			title: 'Coordinator',
			bio: 'Provides administrative, operational, and project support',
			image: getPlaceholderAvatar('Helena Arnold', 4),
			linkedin: '#',
		},
		{
			name: 'Leigh McKay',
			title: 'Coordinator',
			bio: 'Provides administrative, operational, and project support',
			image: getPlaceholderAvatar('Leigh McKay', 5),
			linkedin: '#',
		},
	],
	board: [
		{
			name: 'Ryan Coleman',
			title: 'Board Chair',
			image: getPlaceholderAvatar('Ryan Coleman', 6),
			linkedin: '#',
		},
		{
			name: 'Akua Schatz',
			title: 'Board Member',
			image: getPlaceholderAvatar('Akua Schatz', 7),
			linkedin: '#',
		},
		{
			name: 'Andy Cockburn',
			title: 'Board Member',
			image: getPlaceholderAvatar('Andy Cockburn', 8),
			linkedin: '#',
		},
		{
			name: 'Don Gulevich',
			title: 'Board Member',
			image: getPlaceholderAvatar('Don Gulevich', 9),
			linkedin: '#',
		},
		{
			name: 'David Lewis',
			title: 'Board Member',
			image: getPlaceholderAvatar('David Lewis', 10),
			linkedin: '#',
		},
	],
	advisors: [
		{
			name: 'Christine Gustafson',
			title: 'Advisor to the Board',
			image: getPlaceholderAvatar('Christine Gustafson', 11),
			linkedin: '#',
		},
		{
			name: 'Peter Sundberg',
			title: 'Advisor to the Board',
			image: getPlaceholderAvatar('Peter Sundberg', 12),
			linkedin: '#',
		},
		{
			name: 'Jovan Cheema',
			title: 'Advisor to the Board',
			image: getPlaceholderAvatar('Jovan Cheema', 13),
			linkedin: '#',
		},
	],
};

// Fetch team data from API or use fallback
let staff: TeamMember[] = fallbackData.staff;
let board: TeamMember[] = fallbackData.board;
let advisors: TeamMember[] = fallbackData.advisors;

if (TEAM_API_URL) {
	try {
		// Detect API type based on URL pattern
		if (TEAM_API_URL.includes('wp-json')) {
			const teamData = await fetchWordPressTeam(TEAM_API_URL);
			staff = teamData.staff;
			board = teamData.board;
			advisors = teamData.advisors;
		} else {
			const teamData = await fetchCustomAPI(TEAM_API_URL);
			staff = teamData.staff;
			board = teamData.board;
			advisors = teamData.advisors;
		}
	} catch (error) {
		// Fallback data already assigned, log error in development
		if (import.meta.env.DEV) {
			console.error('Using fallback team data due to API error:', error);
		}
	}
}

// Page data
const pageHeaderData = {
	title: 'Our Team',
	description:
		'Meet the passionate individuals driving home performance excellence across British Columbia.',
};

const landAcknowledgmentMessage =
	'The HPSC recognizes and acknowledges with deep appreciation the unique history, languages, and cultures of the 203 First Nations across British Columbia on whose territories we live, work, play, and learn.';
---

<Layout
	title="Our Team | Home Performance Stakeholder Council"
	description="Meet the dedicated team behind the Home Performance Stakeholder Council and learn about our expertise in energy efficiency and building science."
	keywords="HPSC team, home performance experts, energy efficiency professionals, building science team"
	breadcrumbs={[
		{ label: 'About', href: '/about' },
		{ label: 'Our Team', href: '/about/our-team' },
	]}
>
	<PageHeader {...pageHeaderData} />

	<!-- Indigenous Acknowledgment -->
	<div
		class="mb-16 p-6 md:p-8 bg-gradient-to-r from-primary/5 to-primary/10 rounded-2xl border-l-4 border-primary"
	>
		<p class="text-gray-700 leading-relaxed">
			{landAcknowledgmentMessage}
		</p>
	</div>

	<TeamSection title="Staff" members={staff} variant="staff" />
	<TeamSection title="Board of Directors" members={board} variant="board" />
	<TeamSection title="Advisors to the Board" members={advisors} variant="advisor" />

	<!-- Call to Action -->
	<section class="mt-20">
		<div class="bg-gradient-to-r from-primary to-primary-dark rounded-2xl p-8 md:p-12 text-white">
			<h2 class="text-3xl font-bold mb-4">Join Our Mission</h2>
			<p class="text-xl mb-8 text-white/90 max-w-2xl">
				Interested in contributing to home performance excellence in British Columbia?
			</p>
			<div class="flex flex-wrap gap-4">
				<a
					href="/get-involved"
					class="px-8 py-3 bg-white text-primary rounded-lg font-semibold hover:bg-gray-100 transition-colors"
				>
					Get Involved
				</a>
				<a
					href="/contact"
					class="px-8 py-3 border-2 border-white text-white rounded-lg font-semibold hover:bg-white/10 transition-colors"
				>
					Contact Us
				</a>
			</div>
		</div>
	</section>
</Layout>
