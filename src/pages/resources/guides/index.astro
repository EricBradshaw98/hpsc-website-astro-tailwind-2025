---
import Layout from '../../../layouts/Layout.astro';
import FeaturedGuideCard from '../../../components/resources/FeaturedGuideCard.astro';
import GuideCard from '../../../components/resources/GuideCard.astro';
import { guides, getFeaturedGuides } from '../../../data/guides';

// Pagination settings
const GUIDES_PER_PAGE = 12;

// Get URL parameters
const url = new URL(Astro.request.url);
const currentPage = parseInt(url.searchParams.get('page') || '1');
const category = url.searchParams.get('category') || 'all';
const difficulty = url.searchParams.get('difficulty') || 'all';

// Filter guides based on URL parameters
let filteredGuides = guides.filter((g) => !g.featured); // Exclude featured from main list

if (category !== 'all') {
	filteredGuides = filteredGuides.filter((g) => g.category === category);
}
if (difficulty !== 'all') {
	filteredGuides = filteredGuides.filter((g) => g.difficulty === difficulty);
}

// Calculate pagination
const totalGuides = filteredGuides.length;
const totalPages = Math.ceil(totalGuides / GUIDES_PER_PAGE);
const startIndex = (currentPage - 1) * GUIDES_PER_PAGE;
const endIndex = startIndex + GUIDES_PER_PAGE;
const paginatedGuides = filteredGuides.slice(startIndex, endIndex);

// Group paginated guides by category for display
const guidesByCategory = paginatedGuides.reduce(
	(acc: Record<string, any[]>, guide) => {
		if (!acc[guide.category]) {
			acc[guide.category] = [];
		}
		acc[guide.category].push(guide);
		return acc;
	},
	{}
);

// Get featured guides (always show on page 1)
const featuredGuides = currentPage === 1 ? getFeaturedGuides() : [];

// Build pagination URL helper
function buildPageUrl(page: number, cat: string = category, diff: string = difficulty) {
	const params = new URLSearchParams();
	if (page > 1) params.set('page', page.toString());
	if (cat !== 'all') params.set('category', cat);
	if (diff !== 'all') params.set('difficulty', diff);
	const query = params.toString();
	return query ? `/resources/guides?${query}` : '/resources/guides';
}

// Get all unique categories for filter
const allCategories = Array.from(new Set(guides.map((g) => g.category)));

// Build page number array for pagination
const pageNumbers = [];
for (let i = 1; i <= totalPages; i++) {
	const showPage =
		i === 1 || i === totalPages || Math.abs(i - currentPage) <= 1;
	const isEllipsisBefore = !showPage && i === 2;
	const isEllipsisAfter = !showPage && i === totalPages - 1;

	if (showPage || isEllipsisBefore || isEllipsisAfter) {
		pageNumbers.push({
			number: i,
			isCurrent: i === currentPage,
			isEllipsis: isEllipsisBefore || isEllipsisAfter,
			show: showPage,
		});
	}
}
---

<Layout
	title={`Guides${currentPage > 1 ? ` - Page ${currentPage}` : ''} | HPSC Resources`}
	description="Browse our comprehensive guides on home performance, energy efficiency, and retrofit best practices for contractors and homeowners in British Columbia."
	keywords="home performance guides, energy efficiency resources, retrofit guides, contractor resources, homeowner guides"
	breadcrumbs={[
		{ label: 'Resources', href: '/resources' },
		{ label: 'Guides', href: '/resources/guides' },
	]}
>
	<div class="mb-12">
		<h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">Guides</h1>
		<p class="text-xl text-gray-600 max-w-3xl">
			Step-by-step guides to help you navigate home performance, energy efficiency, and contractor
			certification.
		</p>
		<p class="text-sm text-gray-500 mt-2">
			Showing {startIndex + 1}-{Math.min(endIndex, totalGuides)} of {totalGuides} guides
		</p>
	</div>

	<!-- Search and Filter -->
	<div class="mb-12 flex flex-col md:flex-row gap-4">
		<div class="flex-1">
			<div class="relative">
				<svg
					class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400"
					fill="none"
					stroke="currentColor"
					viewBox="0 0 24 24"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
				</svg>
				<input
					type="text"
					id="search-input"
					placeholder="Search guides..."
					class="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors"
				/>
			</div>
		</div>
		<select
			id="category-filter"
			class="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white"
		>
			<option value="all" selected={category === 'all'}>All Categories</option>
			{
				allCategories.map((cat) => (
					<option value={cat} selected={category === cat}>
						{cat}
					</option>
				))
			}
		</select>
		<select
			id="difficulty-filter"
			class="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white"
		>
			<option value="all" selected={difficulty === 'all'}>All Levels</option>
			<option value="Beginner" selected={difficulty === 'Beginner'}>Beginner</option>
			<option value="Intermediate" selected={difficulty === 'Intermediate'}>Intermediate</option>
			<option value="Advanced" selected={difficulty === 'Advanced'}>Advanced</option>
		</select>
	</div>

	<!-- Featured Guides (only on page 1) -->
	{
		featuredGuides.length > 0 && (
			<section class="mb-16">
				<h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-3">
					<svg
						class="w-6 h-6 text-primary"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24"
						aria-hidden="true"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
						/>
					</svg>
					Featured Guides
				</h2>
				<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
					{featuredGuides.map((guide) => (
						<FeaturedGuideCard {...guide} />
					))}
				</div>
			</section>
		)
	}

	<!-- Guides by Category -->
	{
		Object.keys(guidesByCategory).length > 0 ? (
			Object.entries(guidesByCategory).map(([cat, categoryGuides]) => (
				<section class="mb-12" data-category-section={cat}>
					<h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-3">
						{cat === 'Homeowners' ? (
							<svg
								class="w-6 h-6 text-primary"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
								aria-hidden="true"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
								/>
							</svg>
						) : (
							<svg
								class="w-6 h-6 text-primary"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
								aria-hidden="true"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
								/>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
								/>
							</svg>
						)}
						{cat}
					</h2>
					<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
						{categoryGuides.map((guide: any) => (
							<GuideCard {...guide} />
						))}
					</div>
				</section>
			))
		) : (
			<div class="text-center py-12">
				<svg
					class="w-16 h-16 text-gray-400 mx-auto mb-4"
					fill="none"
					stroke="currentColor"
					viewBox="0 0 24 24"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
					/>
				</svg>
				<p class="text-xl text-gray-600 mb-2">No guides found</p>
				<p class="text-gray-500">Try adjusting your filters</p>
			</div>
		)
	}

	<!-- Pagination -->
	{
		totalPages > 1 && (
			<nav class="flex justify-center items-center gap-2 mt-12" aria-label="Pagination">
				{/* Previous button */}
				{currentPage > 1 ? (
					<a
						href={buildPageUrl(currentPage - 1)}
						class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center gap-2"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M15 19l-7-7 7-7"
							/>
						</svg>
						Previous
					</a>
				) : (
					<span class="px-4 py-2 border border-gray-200 rounded-lg text-gray-400 cursor-not-allowed flex items-center gap-2">
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M15 19l-7-7 7-7"
							/>
						</svg>
						Previous
					</span>
				)}

				{/* Page numbers */}
				<div class="flex gap-2">
					{pageNumbers.map((pageInfo) => {
						if (pageInfo.isEllipsis) {
							return <span class="px-3 py-2 text-gray-400">...</span>;
						}
						if (pageInfo.isCurrent) {
							return (
								<span class="px-4 py-2 bg-primary text-white rounded-lg font-semibold">
									{pageInfo.number}
								</span>
							);
						}
						return (
							<a
								href={buildPageUrl(pageInfo.number)}
								class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
							>
								{pageInfo.number}
							</a>
						);
					})}
				</div>

				{/* Next button */}
				{currentPage < totalPages ? (
					<a
						href={buildPageUrl(currentPage + 1)}
						class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center gap-2"
					>
						Next
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M9 5l7 7-7 7"
							/>
						</svg>
					</a>
				) : (
					<span class="px-4 py-2 border border-gray-200 rounded-lg text-gray-400 cursor-not-allowed flex items-center gap-2">
						Next
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M9 5l7 7-7 7"
							/>
						</svg>
					</span>
				)}
			</nav>
		)
	}
</Layout>

<script>
	// Client-side search (instant, no page reload)
	const searchInput = document.getElementById('search-input') as HTMLInputElement;
	const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement;
	const difficultyFilter = document.getElementById('difficulty-filter') as HTMLSelectElement;

	function handleFilterChange() {
		const params = new URLSearchParams();
		const category = categoryFilter.value;
		const difficulty = difficultyFilter.value;

		if (category !== 'all') params.set('category', category);
		if (difficulty !== 'all') params.set('difficulty', difficulty);

		const query = params.toString();
		window.location.href = query ? `/resources/guides?${query}` : '/resources/guides';
	}

	categoryFilter?.addEventListener('change', handleFilterChange);
	difficultyFilter?.addEventListener('change', handleFilterChange);

	// Client-side search highlights matches
	searchInput?.addEventListener('input', () => {
		const searchTerm = searchInput.value.toLowerCase();
		const guideCards = document.querySelectorAll('.guide-card');

		guideCards.forEach((card) => {
			const title = card.getAttribute('data-title') || '';
			const matches = title.includes(searchTerm);
			(card as HTMLElement).style.display = matches || searchTerm === '' ? 'block' : 'none';
		});
	});
</script>
