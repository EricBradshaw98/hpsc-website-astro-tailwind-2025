---
import Layout from '../layouts/Layout.astro';
import ContactInfoCard, {
	type ContactInfoCardProps,
} from '../components/contact/ContactInfoCard.astro';
import FAQItem, { type FAQItemProps } from '../components/contact/FAQItem.astro';

const contactInfo: ContactInfoCardProps[] = [
	{
		icon: 'M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z M15 11a3 3 0 11-6 0 3 3 0 016 0z',
		title: 'Office Address',
		content: '123 Energy Efficiency Way<br />Vancouver, BC V6B 1A1<br />Canada',
	},
	{
		icon: 'M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z',
		title: 'Phone',
		content: '',
		link: {
			href: 'tel:+16047553469',
			text: '(604) 755-3469',
		},
	},
	{
		icon: 'M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z',
		title: 'Email',
		content: '',
		link: {
			href: 'mailto:info@homeperformance.ca',
			text: 'info@homeperformance.ca',
		},
	},
	{
		icon: 'M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z',
		title: 'Office Hours',
		content: 'Monday - Friday: 9:00 AM - 5:00 PM<br />Saturday - Sunday: Closed',
	},
];

const faqs: FAQItemProps[] = [
	{
		question: 'How quickly will I receive a response?',
		answer:
			'We typically respond to all inquiries within 1-2 business days. For urgent matters, please call us directly at (604) 755-3469.',
	},
	{
		question: 'Do you offer technical support?',
		answer:
			'Yes! Our technical team is available to help contractors and homeowners with questions about energy assessments, retrofits, and building science.',
	},
	{
		question: 'Can I visit your office?',
		answer:
			'We welcome visitors! Please contact us in advance to schedule an appointment and ensure someone will be available to assist you.',
	},
	{
		question: 'How do I become a certified contractor?',
		answer:
			'Visit our <a href="/contractor-network/certification" class="text-primary hover:underline">certification page</a> or contact us using the subject "Contractor Certification" for detailed information.',
	},
];
---

<Layout
	title="Contact Us | HPSC"
	description="Get in touch with the Home Performance Stakeholder Council. We're here to help with your questions about home energy efficiency, contractor certification, and more."
	keywords="contact HPSC, home performance inquiries, energy efficiency questions, contractor support"
	breadcrumbs={[{ label: 'Contact Us', href: '/contact' }]}
>
	<Fragment slot="head">
		<!-- Cloudflare Turnstile Script -->
		<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>
	</Fragment>

	<div class="w-full">
		<!-- Header -->
		<div class="mb-12">
			<h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">Get in Touch</h1>
			<p class="text-xl text-gray-600 max-w-3xl">
				Have questions about home performance, contractor certification, or energy efficiency
				programs? We're here to help.
			</p>
		</div>

		<div class="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16 px-2 md:px-0">
			<!-- Contact Form -->
			<div class="bg-white rounded-2xl shadow-lg p-2 md:p-4">
				<h2 class="text-2xl font-bold text-gray-900 mb-6">Send Us a Message</h2>
				<form class="space-y-6" id="contact-form">
					<!-- Name -->
					<div>
						<label for="name" class="block text-sm font-semibold text-gray-700 mb-2">
							Full Name <span class="text-red-500">*</span>
						</label>
						<input
							type="text"
							id="name"
							name="name"
							required
							class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors"
							placeholder="John Doe"
						/>
					</div>

					<!-- Email -->
					<div>
						<label for="email" class="block text-sm font-semibold text-gray-700 mb-2">
							Email Address <span class="text-red-500">*</span>
						</label>
						<input
							type="email"
							id="email"
							name="email"
							required
							class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors"
							placeholder="john@example.com"
						/>
					</div>

					<!-- Phone -->
					<div>
						<label for="phone" class="block text-sm font-semibold text-gray-700 mb-2">
							Phone Number
						</label>
						<input
							type="tel"
							id="phone"
							name="phone"
							class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors"
							placeholder="(604) 555-1234"
						/>
					</div>

					<!-- Subject -->
					<div>
						<label for="subject" class="block text-sm font-semibold text-gray-700 mb-2">
							Subject <span class="text-red-500">*</span>
						</label>
						<select
							id="subject"
							name="subject"
							required
							class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors bg-white"
						>
							<option value="">Select a subject</option>
							<option value="general">General Inquiry</option>
							<option value="contractor">Contractor Certification</option>
							<option value="homeowner">Homeowner Resources</option>
							<option value="rebates">Rebate Programs</option>
							<option value="training">Training & Workshops</option>
							<option value="membership">Membership</option>
							<option value="partnership">Partnership Opportunities</option>
							<option value="technical">Technical Support</option>
							<option value="other">Other</option>
						</select>
					</div>

					<!-- Message -->
					<div>
						<label for="message" class="block text-sm font-semibold text-gray-700 mb-2">
							Message <span class="text-red-500">*</span>
						</label>
						<textarea
							id="message"
							name="message"
							required
							rows="6"
							class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors resize-none"
							placeholder="Tell us how we can help..."></textarea>
					</div>

					<!-- Cloudflare Turnstile -->
					<div>
						<div
							class="cf-turnstile"
							data-sitekey="1x00000000000000000000AA"
							data-theme="light"
							data-callback="onTurnstileSuccess"
							data-error-callback="onTurnstileError"
							data-expired-callback="onTurnstileExpired"
						>
						</div>
					</div>

					<!-- Submit Button -->
					<button
						type="submit"
						id="submit-btn"
						disabled
						class="w-full bg-primary hover:bg-primary-dark text-white font-semibold px-6 py-3 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
					>
						Send Message
					</button>
				</form>
			</div>

			<!-- Contact Information & Map -->
			<div class="space-y-8">
				<!-- Contact Info Cards -->
				<div class="bg-white rounded-2xl shadow-lg p-4 md:p-8">
					<h2 class="text-2xl font-bold text-gray-900 mb-6">Contact Information</h2>
					{contactInfo.map((info) => <ContactInfoCard {...info} />)}
				</div>

				<!-- Map -->
				<div class="bg-white rounded-2xl shadow-lg overflow-hidden">
					<iframe
						src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2602.7583826237837!2d-123.12073842349324!3d49.28273097138895!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x548671817d64e9e5%3A0x3e8a7b0c5b3c9f0a!2sVancouver%2C%20BC!5e0!3m2!1sen!2sca!4v1234567890123!5m2!1sen!2sca"
						width="100%"
						height="400"
						style="border:0;"
						allowfullscreen=""
						loading="lazy"
						referrerpolicy="no-referrer-when-downgrade"
						title="HPSC Office Location Map"
						class="w-full"></iframe>
				</div>
			</div>
		</div>

		<!-- FAQ Section -->
		<div class="bg-gray-50 rounded-2xl p-4 md:p-8 lg:p-12 mb-16 -mx-4 md:mx-0">
			<h2 class="text-3xl font-bold text-gray-900 mb-8">Frequently Asked Questions</h2>
			<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
				<div class="lg:col-span-2 space-y-4">
					{faqs.map((faq) => <FAQItem {...faq} />)}
				</div>

				<!-- Additional Questions CTA -->
				<div class="lg:col-span-1">
					<div class="bg-white rounded-2xl shadow-md p-6 sticky top-24">
						<div class="text-center">
							<div
								class="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4"
							>
								<svg
									class="w-8 h-8 text-primary"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 24 24"
									aria-hidden="true"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
									></path>
								</svg>
							</div>
							<h3 class="text-xl font-bold text-gray-900 mb-3">Have Another Question?</h3>
							<p class="text-gray-600 mb-6">
								Can't find what you're looking for? We're here to help!
							</p>
							<a
								href="#contact-form"
								class="block w-full bg-primary-dark text-white font-semibold px-6 py-3 rounded-lg hover:bg-primary-dark transition-colors mb-3"
								onclick="const element = document.getElementById('contact-form'); const y = element.getBoundingClientRect().top + window.pageYOffset - 100; window.scrollTo({ top: y, behavior: 'smooth' }); return false;"
							>
								Ask Your Question
							</a>
							<p class="text-sm text-gray-500">
								Or call us at <a href="tel:+16047553469" class="text-primary hover:underline"
									>(604) 755-3469</a
								>
							</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</Layout>

<script>
	// Turnstile callback functions
	let turnstileToken: string | null = null;

	// Check if all required fields are filled
	function areRequiredFieldsFilled(): boolean {
		const name = (document.getElementById('name') as HTMLInputElement)?.value.trim();
		const email = (document.getElementById('email') as HTMLInputElement)?.value.trim();
		const subject = (document.getElementById('subject') as HTMLSelectElement)?.value;
		const message = (document.getElementById('message') as HTMLTextAreaElement)?.value.trim();
		return !!(name && email && subject && message);
	}

	// Update submit button state
	function updateSubmitButton() {
		const submitButton = document.getElementById('submit-btn') as HTMLButtonElement;
		if (submitButton) {
			submitButton.disabled = !(areRequiredFieldsFilled() && turnstileToken);
		}
	}

	(window as any).onTurnstileSuccess = function (token: string) {
		turnstileToken = token;
		updateSubmitButton();
	};

	(window as any).onTurnstileError = function () {
		turnstileToken = null;
		updateSubmitButton();
		if (window.showToast) {
			window.showToast({
				message: 'Security verification failed. Please refresh the page and try again.',
				type: 'error',
				duration: 7000,
			});
		}
	};

	(window as any).onTurnstileExpired = function () {
		turnstileToken = null;
		updateSubmitButton();
	};

	// Listen for input changes on required fields
	document.addEventListener('DOMContentLoaded', () => {
		const requiredFields = ['name', 'email', 'subject', 'message'];
		requiredFields.forEach((fieldId) => {
			const field = document.getElementById(fieldId);
			field?.addEventListener('input', updateSubmitButton);
			field?.addEventListener('change', updateSubmitButton);
		});
	});

	// Form submission handler
	const form = document.getElementById('contact-form') as HTMLFormElement;

	form?.addEventListener('submit', async (e) => {
		e.preventDefault();

		// Verify Turnstile token exists
		if (!turnstileToken) {
			if (window.showToast) {
				window.showToast({
					message: 'Please complete the security verification.',
					type: 'warning',
					duration: 5000,
				});
			}
			return;
		}

		const formData = new FormData(form);
		const data = Object.fromEntries(formData.entries());
		// Add Turnstile token to submission data
		(data as any).turnstileToken = turnstileToken;

		// Show loading state
		const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
		const originalButtonText = submitButton.innerHTML;
		submitButton.disabled = true;
		submitButton.innerHTML = 'Sending...';

		try {
			// TODO: Replace with actual API endpoint when ready
			// The API should verify the turnstile token server-side
			// Example: await fetch('/api/contact', { method: 'POST', body: JSON.stringify(data) });
			// For now, simulate form submission
			await new Promise((resolve) => setTimeout(resolve, 1000));

			// Show success toast
			if (window.showToast) {
				window.showToast({
					message: 'Thank you for your message! We will get back to you within 1-2 business days.',
					type: 'success',
					duration: 6000,
				});
			}

			// Reset form and Turnstile
			form.reset();
			turnstileToken = null;
			// Reset Turnstile widget
			if ((window as any).turnstile) {
				(window as any).turnstile.reset();
			}
			updateSubmitButton();
		} catch {
			// Show error toast
			if (window.showToast) {
				window.showToast({
					message:
						'Sorry, there was an error sending your message. Please try again or contact us directly.',
					type: 'error',
					duration: 7000,
				});
			}
		} finally {
			// Reset button
			submitButton.disabled = false;
			submitButton.innerHTML = originalButtonText;
		}
	});

	// FAQ Smooth Animation
	document.addEventListener('DOMContentLoaded', () => {
		document.querySelectorAll('.faq-item').forEach((details) => {
			const summary = details.querySelector('summary');
			const content = details.querySelector('.faq-content') as HTMLElement;

			if (!summary || !content) return;

			// Store animation state
			let isAnimating = false;

			summary.addEventListener('click', (e) => {
				e.preventDefault();

				// Prevent multiple clicks during animation
				if (isAnimating) return;
				isAnimating = true;

				const isOpen = details.hasAttribute('open');

				if (isOpen) {
					// Closing animation
					const startHeight = content.scrollHeight;
					content.style.height = startHeight + 'px';

					// Force reflow
					requestAnimationFrame(() => {
						content.style.height = '0px';
					});

					// Wait for animation to complete before removing 'open'
					const onTransitionEnd = () => {
						content.removeEventListener('transitionend', onTransitionEnd);
						details.removeAttribute('open');
						content.style.height = '';
						isAnimating = false;
					};

					content.addEventListener('transitionend', onTransitionEnd);
				} else {
					// Opening animation
					details.setAttribute('open', '');
					const endHeight = content.scrollHeight;
					content.style.height = '0px';

					// Force reflow
					requestAnimationFrame(() => {
						content.style.height = endHeight + 'px';
					});

					// Reset height to auto after animation
					const onTransitionEnd = () => {
						content.removeEventListener('transitionend', onTransitionEnd);
						content.style.height = 'auto';
						isAnimating = false;
					};

					content.addEventListener('transitionend', onTransitionEnd);
				}
			});
		});
	});
</script>

<style>
	.faq-content {
		overflow: hidden;
		transition: height 350ms cubic-bezier(0.4, 0, 0.2, 1);
		height: 0;
	}

	details[open] .faq-content {
		height: auto;
	}

	summary::-webkit-details-marker {
		display: none;
	}
</style>
